name: Build, Push to ECR, Deploy to EC2 Main

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .

    - name: Push Docker image to ECR
      run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

    - name: SSH into EC2 instance and update container
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          # Determine which environment is currently active (Blue or Green)
          if [ $(docker ps -q -f name=xhip-desk-app-blue) ]; then
            NEW_ENV=green
            OLD_ENV=blue
          else
            NEW_ENV=blue
            OLD_ENV=green
          fi

          # Run the new container on the appropriate environment
          NEW_CONTAINER_NAME=xhip-desk-app-$NEW_ENV
          docker run -d --name $NEW_CONTAINER_NAME ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Wait for the new container to be ready (using health check)
          timeout 300 bash -c 'until curl -s http://localhost:3000/health | grep -q "OK"; do sleep 5; done'
          
          # Update the NGINX configuration to point to the new container
          sudo sed -i "s/xhip-desk-app-$OLD_ENV/xhip-desk-app-$NEW_ENV/" /etc/nginx/conf.d/default.conf
          sudo nginx -s reload
          
          # Stop and remove the old container
          docker stop xhip-desk-app-$OLD_ENV || true
          docker rm xhip-desk-app-$OLD_ENV || true