name: Build, Push to ECR, Deploy to EC2 Main

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          # Ensure AWS CLI is configured to use the instance profile
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          
          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          # Pull the latest image
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Determine blue/green environment
          if [ $(docker ps -q -f name=xhip-desk-app-blue) ]; then
            NEW_ENV=green
            OLD_ENV=blue
            NEW_PORT=3001
            OLD_PORT=3000
          else
            NEW_ENV=blue
            OLD_ENV=green
            NEW_PORT=3000
            OLD_PORT=3001
          fi
          
          # Run new container
          NEW_CONTAINER_NAME=xhip-desk-app-$NEW_ENV
          docker run -d -p $NEW_PORT:3000 -e PORT=3000 --name $NEW_CONTAINER_NAME ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Wait for container to be healthy
          echo "Waiting for container to become healthy..."
          TIMEOUT=300
          ELAPSED=0
          INTERVAL=10
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker inspect --format="{{.State.Health.Status}}" $NEW_CONTAINER_NAME | grep -q "healthy"; then
              echo "Container is healthy!"
              break
            fi
            echo "Container not healthy yet, waiting..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Container did not become healthy within the timeout period"
            echo "Container logs:"
            docker logs $NEW_CONTAINER_NAME
            exit 1
          fi
          
          # Update Nginx configuration
          echo "set \$upstream_app $NEW_ENV;" | sudo tee /etc/nginx/conf.d/active_deployment.conf
          sudo nginx -s reload
          
          # Stop and remove the old container
          docker stop xhip-desk-app-$OLD_ENV || true
          docker rm xhip-desk-app-$OLD_ENV || true
        '
        